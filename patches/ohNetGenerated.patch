diff --git a/Makefile b/Makefile
index bf7a1ba..9aa5119 100644
--- a/Makefile
+++ b/Makefile
@@ -90,20 +90,23 @@ else
     endif
     ifneq (,$(findstring i386,$(gcc_machine)))
       detected_openhome_architecture = x86
     endif
     ifneq (,$(findstring amd64,$(gcc_machine)))
       detected_openhome_architecture = x64
     endif
     ifneq (,$(findstring x86_64,$(gcc_machine)))
       detected_openhome_architecture = x64
     endif
+    ifneq (,$(findstring aarch64,$(gcc_machine)))
+      detected_openhome_architecture = arm64
+    endif
 
 
 endif
 
 detected_openhome_system ?= Unknown
 detected_openhome_architecture ?= Unknown
 
 ifneq (${openhome_system},)
   ifneq (${openhome_system},${detected_openhome_system})
     $(warning Detected compiler is for system ${detected_openhome_system} but expected ${openhome_system}. Build will probably fail.)
diff --git a/bundle_binaries.py b/bundle_binaries.py
index a8d4b0a..0be6b3b 100644
--- a/bundle_binaries.py
+++ b/bundle_binaries.py
@@ -32,47 +32,71 @@ def recursively_add_directory(tarfile, directory_path, path_in_archive, exclude=
                 tarfile.add(path.join(sub_path, fname), path.join(path_in_archive, relative_dir, fname))
 
 BuildTarget = namedtuple("BuildTarget", "system architecture configuration")
 BuildInfo = namedtuple("BuildInfo", "builddir")
 ALL_TARGETS = {
         BuildTarget("Windows", "x86",   "Debug"):   BuildInfo(builddir="Build/Obj/Windows/Debug"),
         BuildTarget("Windows", "x64",   "Debug"):   BuildInfo(builddir="Build/Obj/Windows/Debug"),
         BuildTarget("Windows", "x86",   "Release"): BuildInfo(builddir="Build/Obj/Windows/Release"),
         BuildTarget("Windows", "x64",   "Release"): BuildInfo(builddir="Build/Obj/Windows/Release"),
 
-        BuildTarget("Windows10", "x86",   "Debug"): BuildInfo(builddir="Build/Obj/Windows/Release"),
+        BuildTarget("Windows81", "x86",   "Debug"):   BuildInfo(builddir="Build/Obj/Windows/Debug"),
+        BuildTarget("Windows81", "x64",   "Debug"):   BuildInfo(builddir="Build/Obj/Windows/Debug"),
+        BuildTarget("Windows81", "arm",   "Debug"):   BuildInfo(builddir="Build/Obj/Windows/Debug"),
+        BuildTarget("Windows81", "x86",   "Release"): BuildInfo(builddir="Build/Obj/Windows/Release"),
+        BuildTarget("Windows81", "x64",   "Release"): BuildInfo(builddir="Build/Obj/Windows/Release"),
+        BuildTarget("Windows81", "arm",   "Release"): BuildInfo(builddir="Build/Obj/Windows/Release"),
+
+        BuildTarget("Windows10", "x86",   "Debug"):   BuildInfo(builddir="Build/Obj/Windows/Debug"),
+        BuildTarget("Windows10", "x64",   "Debug"):   BuildInfo(builddir="Build/Obj/Windows/Debug"),
+        BuildTarget("Windows10", "arm",   "Debug"):   BuildInfo(builddir="Build/Obj/Windows/Debug"),
         BuildTarget("Windows10", "x86",   "Release"): BuildInfo(builddir="Build/Obj/Windows/Release"),
+        BuildTarget("Windows10", "x64",   "Release"): BuildInfo(builddir="Build/Obj/Windows/Release"),
+        BuildTarget("Windows10", "arm",   "Release"): BuildInfo(builddir="Build/Obj/Windows/Release"),
 
         BuildTarget("Linux",   "x86",   "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
         BuildTarget("Linux",   "x64",   "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
         BuildTarget("Linux",   "armel", "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
         BuildTarget("Linux",   "armhf", "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
+        BuildTarget("Linux",   "rpi",   "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
         BuildTarget("Linux",   "ppc32", "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
+        BuildTarget("Linux",   "mipsel","Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
+        BuildTarget("Linux",   "arm64", "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
         BuildTarget("Linux",   "x86",   "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
         BuildTarget("Linux",   "x64",   "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
         BuildTarget("Linux",   "armel", "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
         BuildTarget("Linux",   "armhf", "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
+        BuildTarget("Linux",   "rpi",   "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
         BuildTarget("Linux",   "ppc32", "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
-        
-        BuildTarget("Qnap",   "x86",   "Debug"):    BuildInfo(builddir="Build/Obj/Posix/Debug"),
-        BuildTarget("Qnap",   "x86",   "Release"):  BuildInfo(builddir="Build/Obj/Posix/Release"),
+        BuildTarget("Linux",   "mipsel","Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
+        BuildTarget("Linux",   "arm64", "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
+
+        BuildTarget("Qnap",    "x86",   "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
+        BuildTarget("Qnap",    "x86",   "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
+        BuildTarget("Qnap",    "x19",   "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
+        BuildTarget("Qnap",    "x19",   "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
 
         BuildTarget("Mac",     "x86",   "Debug"):   BuildInfo(builddir="Build/Obj/Mac-x86/Debug"),
         BuildTarget("Mac",     "x64",   "Debug"):   BuildInfo(builddir="Build/Obj/Mac-x64/Debug"),
         BuildTarget("Mac",     "x86",   "Release"): BuildInfo(builddir="Build/Obj/Mac-x86/Release"),
         BuildTarget("Mac",     "x64",   "Release"): BuildInfo(builddir="Build/Obj/Mac-x64/Release"),
 
+        BuildTarget("FreeBSD", "x86",   "Debug"):   BuildInfo(builddir="Build/Obj/Posix/Debug"),
+        BuildTarget("FreeBSD", "x86",   "Release"): BuildInfo(builddir="Build/Obj/Posix/Release"),
+
         BuildTarget("iOs",     "x86",   "Debug"):   BuildInfo(builddir="Build/Obj/iOs-x86/Debug"),
+        BuildTarget("iOs",     "x64",   "Debug"):   BuildInfo(builddir="Build/Obj/iOs-x64/Debug"),
         BuildTarget("iOs",     "armv6", "Debug"):   BuildInfo(builddir="Build/Obj/iOs-armv6/Debug"),
         BuildTarget("iOs",     "armv7", "Debug"):   BuildInfo(builddir="Build/Obj/iOs-armv7/Debug"),
         BuildTarget("iOs",     "arm64", "Debug"):   BuildInfo(builddir="Build/Obj/iOs-arm64/Debug"),
         BuildTarget("iOs",     "x86",   "Release"): BuildInfo(builddir="Build/Obj/iOs-x86/Release"),
+        BuildTarget("iOs",     "x64",   "Release"): BuildInfo(builddir="Build/Obj/iOs-x64/Release"),
         BuildTarget("iOs",     "armv6", "Release"): BuildInfo(builddir="Build/Obj/iOs-armv6/Release"),
         BuildTarget("iOs",     "armv7", "Release"): BuildInfo(builddir="Build/Obj/iOs-armv7/Release"),
         BuildTarget("iOs",     "arm64", "Release"): BuildInfo(builddir="Build/Obj/iOs-arm64/Release"),
 
         BuildTarget("Core",    "armv5", "Debug"):   BuildInfo(builddir="Build/Obj/Core-armv5/Debug"),
         BuildTarget("Core",    "armv5", "Release"): BuildInfo(builddir="Build/Obj/Core-armv5/Release"),
         BuildTarget("Core",    "armv6", "Debug"):   BuildInfo(builddir="Build/Obj/Core-armv6/Debug"),
         BuildTarget("Core",    "armv6", "Release"): BuildInfo(builddir="Build/Obj/Core-armv6/Release"),
         BuildTarget("Core",    "ppc32", "Debug"):   BuildInfo(builddir="Build/Obj/Core-ppc32/Debug"),
         BuildTarget("Core",    "ppc32", "Release"): BuildInfo(builddir="Build/Obj/Core-ppc32/Release"),
@@ -121,35 +145,44 @@ def main():
     #targetname = args[1]  # E.g. "Windows-x86", "Linux-ARM", "Linux-x64"
     #release_type = args[2] # e.g. debug release
 
     builddir = buildinfo.builddir
     includedir = "Build/Include"
     outputdir = "Build/Bundles"
     t4dir = "Build/Tools"
     templateDir = "OpenHome/Net/T4/Templates"
     uisdkDir = "OpenHome/Net/Bindings/Js/ControlPoint"
     pyDir = "OpenHome/Net/Bindings/Python/PyOhNet"
+    serviceGenDir = "OpenHome/Net/ServiceGen"
+
 
     #if release_type == 'debug':
     #    builddir = os.path.join(builddir, 'Debug')
     #if release_type == 'release':
     #    builddir = os.path.join(builddir, 'Release')
 
     if options.managed_only:
-        bundle_fileprefix = "ohNetGenerated-AnyPlatform-{target.configuration}".format(target=target)
+        bundle_fileprefix = "ohNetGenerated.net-AnyPlatform-{target.configuration}".format(target=target)
     else:
         bundle_fileprefix = "ohNetGenerated-{target.system}-{target.architecture}-{target.configuration}".format(target=target)
     bundle_filename = bundle_fileprefix + ".tar.gz"
     bundle_path = path.join(outputdir, bundle_filename)
     if os.path.exists(bundle_path):
         os.remove(bundle_path)
 
     tf = tarfile.open(bundle_path, 'w:gz')
 
-    if options.managed_only or options.system == 'Windows10':
+    if options.managed_only:
         recursively_add_directory(tf, builddir, bundle_fileprefix + "/lib", exclude=exclude_non_managed)
     else:
         recursively_add_directory(tf, builddir, bundle_fileprefix + "/lib", exclude=exclude_non_binary)
+        #tf.add(builddir, bundle_fileprefix + "/lib", exclude=exclude_non_binary)
         recursively_add_directory(tf, includedir, bundle_fileprefix + "/include/ohnet")
+        #tf.add(includedir, bundle_fileprefix + "/include/ohnet")
+        recursively_add_directory(tf, t4dir, bundle_fileprefix + "/lib/t4")
+        recursively_add_directory(tf, templateDir, bundle_fileprefix + "/lib/t4")
+        recursively_add_directory(tf, uisdkDir, bundle_fileprefix + "/lib/ui")
+        recursively_add_directory(tf, pyDir, bundle_fileprefix + "/lib/PyOhNet")
+        recursively_add_directory(tf, serviceGenDir, bundle_fileprefix + "/lib/ServiceGen")
 
 if __name__ == "__main__":
     main()
